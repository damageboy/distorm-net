<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>diStorm</name>
  </assembly>
  <members>
    <member name="N:diStorm">
    </member>
    <member name="T:diStorm.CodeInfo">
    </member>
    <member name="M:diStorm.CodeInfo.#ctor(System.Int64,System.Byte[],diStorm.DecodeType,System.Int32)">
      <param name="codeOffset">
</param>
      <param name="rawCode">
</param>
      <param name="dt">
</param>
      <param name="features">
</param>
    </member>
    <member name="M:diStorm.CodeInfo.#ctor(System.Int64,System.Byte*,System.Int32,diStorm.DecodeType,System.Int32)">
      <param name="codeOffset">
</param>
      <param name="code">
</param>
      <param name="codeLength">
</param>
      <param name="dt">
</param>
      <param name="features">
</param>
    </member>
    <member name="T:diStorm.DecodedInstruction">
    </member>
    <member name="P:diStorm.DecodedInstruction.Mnemonic">
    </member>
    <member name="P:diStorm.DecodedInstruction.Operands">
    </member>
    <member name="P:diStorm.DecodedInstruction.Hex">
    </member>
    <member name="P:diStorm.DecodedInstruction.Size">
    </member>
    <member name="P:diStorm.DecodedInstruction.Offset">
    </member>
    <member name="T:diStorm.DecodedResult">
    </member>
    <member name="M:diStorm.DecodedResult.#ctor(System.Int32)">
      <param name="maxInstructionCount">
</param>
    </member>
    <member name="P:diStorm.DecodedResult.Instructions">
    </member>
    <member name="P:diStorm.DecodedResult.MaxInstructionCount">
    </member>
    <member name="P:diStorm.DecodedResult.UsedInstructionCount">
    </member>
    <member name="P:diStorm.DecodedResult.InstructionsPointer">
    </member>
    <member name="M:diStorm.DecodedResult.Dispose">
      <summary>
Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:diStorm.DecomposedInstruction">
    </member>
    <member name="T:diStorm.DecomposedInstruction.ImmVariant">
    </member>
    <member name="P:diStorm.DecomposedInstruction.ImmVariant.ImmediateValue">
    </member>
    <member name="P:diStorm.DecomposedInstruction.ImmVariant.Size">
    </member>
    <member name="T:diStorm.DecomposedInstruction.DispVariant">
    </member>
    <member name="P:diStorm.DecomposedInstruction.DispVariant.Displacement">
    </member>
    <member name="P:diStorm.DecomposedInstruction.DispVariant.Size">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Address">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Flags">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Size">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Opcode">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Segment">
    </member>
    <member name="P:diStorm.DecomposedInstruction.IsSegmentDefault">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Base">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Scale">
    </member>
    <member name="P:diStorm.DecomposedInstruction.UnusedPrefixesMask">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Meta">
    </member>
    <member name="P:diStorm.DecomposedInstruction.RegistersMask">
    </member>
    <member name="P:diStorm.DecomposedInstruction.ModifiedFlagsMask">
    </member>
    <member name="P:diStorm.DecomposedInstruction.TestedFlagsMask">
    </member>
    <member name="P:diStorm.DecomposedInstruction.UndefinedFlagsMask">
    </member>
    <member name="P:diStorm.DecomposedInstruction.ImmediateValue">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Displacement">
    </member>
    <member name="P:diStorm.DecomposedInstruction.Operands">
    </member>
    <member name="M:diStorm.DecomposedInstruction.FromUnsafe(diStorm.DecomposedInstructionStruct*)">
      <param name="srcInst">
</param>
    </member>
    <member name="T:diStorm.DecomposedResult">
    </member>
    <member name="M:diStorm.DecomposedResult.#ctor(System.Int32)">
      <param name="maxInstructions">
</param>
    </member>
    <member name="P:diStorm.DecomposedResult.Instructions">
    </member>
    <member name="P:diStorm.DecomposedResult.MaxInstructions">
    </member>
    <member name="P:diStorm.DecomposedResult.UsedInstructions">
    </member>
    <member name="P:diStorm.DecomposedResult.InstructionsPointer">
    </member>
    <member name="M:diStorm.DecomposedResult.Dispose">
      <summary>
Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:diStorm.DecodeType">
    </member>
    <member name="F:diStorm.DecodeType.Decode16Bits">
    </member>
    <member name="F:diStorm.DecodeType.Decode32Bits">
    </member>
    <member name="F:diStorm.DecodeType.Decode64Bits">
    </member>
    <member name="T:diStorm.DiStorm3">
    </member>
    <member name="M:diStorm.DiStorm3.Malloc(System.Int32)">
      <param name="sz">
</param>
    </member>
    <member name="M:diStorm.DiStorm3.Decompose(diStorm.CodeInfo,System.Int32)">
      <param name="nci">
</param>
      <param name="maxInstructions">
</param>
    </member>
    <member name="M:diStorm.DiStorm3.Decode(diStorm.CodeInfo,System.Int32)">
      <param name="nci">
</param>
      <param name="maxInstructions">
</param>
    </member>
    <member name="M:diStorm.DiStorm3.Format(diStorm.CodeInfo,diStorm.DecomposedInstruction)">
      <param name="nci">
</param>
      <param name="ndi">
</param>
    </member>
    <member name="T:diStorm.DecomposedInstructionStruct">
    </member>
    <member name="P:diStorm.DecomposedInstructionStruct.Operands">
    </member>
    <member name="T:diStorm.OperandStruct">
    </member>
    <member name="P:diStorm.OperandStruct.Register">
    </member>
    <member name="T:diStorm.ImmediateValue">
    </member>
    <member name="T:diStorm.ExtraStruct">
    </member>
    <member name="T:diStorm.ImmediatePointerStruct">
    </member>
    <member name="T:diStorm.WStringStruct">
    </member>
    <member name="F:diStorm.WStringStruct.MAX_TEXT_SIZE">
    </member>
    <member name="T:diStorm.DecodedInstructionStruct">
    </member>
    <member name="T:diStorm.EnumerableExtensions">
    </member>
    <member name="M:diStorm.EnumerableExtensions.DisposeAfter``1(System.Collections.Generic.IEnumerable{``0})">
      <param name="enumerable">
</param>
    </member>
    <member name="T:diStorm.OperandType">
      <summary>
Described the type of operand stored in the <see cref="Operand" /> class</summary>
    </member>
    <member name="F:diStorm.OperandType.None">
      <summary>
No operand, operand is to be ignored.</summary>
    </member>
    <member name="F:diStorm.OperandType.Register">
      <summary>
Register operand, value should be retrieved from the <see cref="DecodedInstruction.Operands" /> using the <see cref="Operand.Register" /> property</summary>
    </member>
    <member name="F:diStorm.OperandType.Immediate">
      <summary>
Immediate operand, value should be retrieved using <see cref="DecomposedInstruction.ImmediateValue" /></summary>
    </member>
    <member name="F:diStorm.OperandType.Immediate1">
      <summary>
Immediate operand, value should be retrieved using <see cref="DecomposedInstruction.ImmediateValue" />/ <see cref="ImmediateValue.Extra" />/<see cref="ExtraStruct.I1" /></summary>
    </member>
    <member name="F:diStorm.OperandType.Immediate2">
      <summary>
Immediate operand, value should be retrieved using <see cref="DecomposedInstruction.ImmediateValue" />/<see cref="ImmediateValue.Extra" />/<see cref="ExtraStruct.I2" /></summary>
    </member>
    <member name="F:diStorm.OperandType.Displacement">
      <summary>
Memory reference with displacement, value can be retrieved using <see cref="DecomposedInstruction.Displacement" /></summary>
    </member>
    <member name="F:diStorm.OperandType.SimpleMemory">
      <summary>
Simple memory displacement with optional displacement (For example, a single register memory dereference)</summary>
    </member>
    <member name="F:diStorm.OperandType.ComplexMemory">
      <summary>
Complex memory dereference (Optional <see cref="DecomposedInstruction.Scale" />, <see cref="Operand.Index" />, <see cref="DecomposedInstruction.Base" />, <see cref="DecomposedInstruction.Displacement" /></summary>
    </member>
    <member name="F:diStorm.OperandType.ProgramCounter">
      <summary>
Relative to ProgramCounter (EIP in x86/x64), for branching instructions. value should be retrieved using <see cref="DecomposedInstruction.ImmediateValue" />/<see cref="ImmediateValue.RelativeAddress" />/<see cref="ExtraStruct.I1" /></summary>
    </member>
    <member name="F:diStorm.OperandType.Pointer">
      <summary>
Absolute far target address for a branching instruction. value should be retrieved using <see cref="DecomposedInstruction.ImmediateValue" />.<see cref="ImmediateValue.Pointer" />. <see cref="ImmediatePointerStruct.Segment" />|<see cref="ImmediatePointerStruct.Offset" /></summary>
    </member>
    <member name="T:diStorm.Operand">
    </member>
    <member name="P:diStorm.Operand.Type">
      <summary>
The different operand types "instruct" how to retrieve the actual operand value, therefore this member is normally accessed before anything else in the <see cref="Operand" /> class</summary>
    </member>
    <member name="P:diStorm.Operand.Register">
    </member>
    <member name="P:diStorm.Operand.Index">
      <summary>
<para>Index, used according to the Type:</para> <para /> <list type="table"><listheader><term>Type</term><description>Value Means</description></listheader><item><term><see cref="OperandType.Register" /></term><description>Hold the register used, can be accessed directly using <see cref="Register" /></description></item><item><term>SimpleMemory</term><description>Hold the 'Base' register, e.g.: [ECX], [EBX+0x1234]</description></item><item><term>ComplexMemory</term><description>Holds the 'index' register. e.g.: [EAX*4] is in operand.index.</description></item></list> <para /></summary>
    </member>
    <member name="P:diStorm.Operand.Size">
      <summary>
The size of the operand in bits</summary>
    </member>
  </members>
</doc>
